!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUILTIN_H	includes/builtin.h	/^# define BUILTIN_H$/;"	d
BUILTIN_OBJS	Makefile	/^BUILTIN_OBJS = $(BUILTIN_SRCS:.c=.o)$/;"	m
BUILTIN_SRCS	Makefile	/^BUILTIN_SRCS = $(addprefix .\/srcs\/builtin_srcs\/, ft_cd.c set_envkey.c ft_pwd.c ft_exit.c ft_export.c ft_unset.c ft_echo.c ft_env.c)$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CD	includes/defines_enums.h	/^# define	CD	/;"	d
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g3 -fsanitize=address$/;"	m
CFLAGS	Makefile	/^\\CFLAGS = -fsanitize=address -g3$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -c -g3 -fsanitize=address$/;"	m
DEFINES_ENUMS_H	includes/defines_enums.h	/^# define DEFINES_ENUMS_H$/;"	d
DQUO	includes/defines_enums.h	/^	DQUO = '\\"',$/;"	e	enum:e_char_type
ECHO	includes/defines_enums.h	/^# define	ECHO	/;"	d
END_C	includes/defines_enums.h	/^	END_C = '\\0'$/;"	e	enum:e_char_type
ENV	includes/defines_enums.h	/^# define	ENV	/;"	d
ERROR_HANDLER	includes/error_handler.h	/^# define ERROR_HANDLER$/;"	d
EXECUTE_H	includes/execute.h	/^# define EXECUTE_H$/;"	d
EXEC_OBJS	Makefile	/^EXEC_OBJS = $(EXEC_SRCS:.c=.o)$/;"	m
EXEC_SRCS	Makefile	/^EXEC_SRCS = $(addprefix .\/srcs\/execute_srcs\/, execute.c exec.c print_cmddata.c)$/;"	m
EXIT	includes/defines_enums.h	/^# define	EXIT	/;"	d
EXPORT	includes/defines_enums.h	/^# define	EXPORT	/;"	d
E_BUILTIN	includes/structs.h	/^	E_BUILTIN,$/;"	e	enum:e_cmdtype
E_CMD	includes/structs.h	/^	E_CMD,$/;"	e	enum:e_cmdtype
FAIL	includes/defines_enums.h	/^# define	FAIL	/;"	d
FT	Makefile	/^FT = libft.a$/;"	m
FTDIR	Makefile	/^FTDIR = .\/libft\/$/;"	m
FTINC	Makefile	/^FTINC = .\/libft\/$/;"	m
GCC	Makefile	/^GCC = gcc$/;"	m
GET_APP_LIST	includes/defines_enums.h	/^# define GET_APP_LIST(/;"	d
GET_ARGS	includes/defines_enums.h	/^# define GET_ARGS(/;"	d
GET_CMD	includes/defines_enums.h	/^# define GET_CMD(/;"	d
GET_DELIMETER	includes/defines_enums.h	/^# define GET_DELIMETER(/;"	d
GET_FILEPATH	includes/defines_enums.h	/^# define GET_FILEPATH(/;"	d
GET_HEREDOC_LIST	includes/defines_enums.h	/^# define GET_HEREDOC_LIST(/;"	d
GET_INPUT_LIST	includes/defines_enums.h	/^# define GET_INPUT_LIST(/;"	d
GET_OUTPUT_LIST	includes/defines_enums.h	/^# define GET_OUTPUT_LIST(/;"	d
GET_TOKEN_BUFFER	includes/defines_enums.h	/^# define GET_TOKEN_BUFFER(/;"	d
GET_TOKEN_NTH	includes/defines_enums.h	/^# define GET_TOKEN_NTH(/;"	d
GET_TOKEN_TYPE	includes/defines_enums.h	/^# define GET_TOKEN_TYPE(/;"	d
GREATER	includes/defines_enums.h	/^	GREATER = '>', $/;"	e	enum:e_char_type
INC	Makefile	/^INC = .\/includes$/;"	m
LESSER	includes/defines_enums.h	/^	LESSER = '<',$/;"	e	enum:e_char_type
LEXER_H	includes/lexer.h	/^# define LEXER_H$/;"	d
LIBFT_H	libft/libft.h	/^# define  LIBFT_H$/;"	d
MAIN_H	includes/main.h	/^# define MAIN_H$/;"	d
MAIN_OBJS	Makefile	/^MAIN_OBJS = $(MAIN_SRCS:.c=.o)$/;"	m
MAIN_SRCS	Makefile	/^MAIN_SRCS = $(addprefix .\/srcs\/main_srcs\/, main.c sig_handler.c display.c initialize_main.c initialize_data.c)$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	srcs/builtin_srcs/Makefile	/^NAME = a.out$/;"	m
NORM	includes/defines_enums.h	/^	NORM = 1,$/;"	e	enum:e_char_type
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	srcs/builtin_srcs/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJ_FILES	Makefile	/^OBJ_FILES = $(MAIN_OBJS) $(BUILTIN_OBJS) $(TOOLS_OBJS) $(TOKEN_OBJS) $(PARSE_OBJS) $(EXEC_OBJS)$/;"	m
OBJ_FILES	libft/Makefile	/^OBJ_FILES = $(OBJS)$/;"	m
OFF	libft/libft.h	/^# define OFF /;"	d
ON	libft/libft.h	/^# define ON /;"	d
PARSER_H	includes/parser.h	/^# define PARSER_H$/;"	d
PARSE_OBJS	Makefile	/^PARSE_OBJS = $(PARSE_SRCS:.c=.o)$/;"	m
PARSE_SRCS	Makefile	/^PARSE_SRCS = $(addprefix .\/srcs\/parsing_srcs_m\/, parser.c parser_tools.c  \\$/;"	m
PIPE	includes/defines_enums.h	/^	PIPE = '|',$/;"	e	enum:e_char_type
PWD	includes/defines_enums.h	/^# define	PWD	/;"	d
RDFLAGS	Makefile	/^RDFLAGS = -I${RDINC} -L${RDLIB} -lreadline #readline compile flags$/;"	m
RDINC	Makefile	/^RDINC = ${HOME}\/.brew\/opt\/readline\/include #readline include path$/;"	m
RDLIB	Makefile	/^RDLIB = ${HOME}\/.brew\/opt\/readline\/lib #readline lib path$/;"	m
SPC	includes/defines_enums.h	/^	SPC = ' ',$/;"	e	enum:e_char_type
SQUO	includes/defines_enums.h	/^	SQUO = '\\'',$/;"	e	enum:e_char_type
SRCS	libft/Makefile	/^SRCS = ft_isdigit.c ft_isalpha.c ft_isalnum.c ft_isascii.c ft_strlen.c \\$/;"	m
SRCS	srcs/builtin_srcs/Makefile	/^SRCS = main.c$/;"	m
STATE_DQUOTE	includes/defines_enums.h	/^	STATE_DQUOTE,$/;"	e	enum:e_state
STATE_NORMAL	includes/defines_enums.h	/^	STATE_NORMAL$/;"	e	enum:e_state
STATE_SQUOTE	includes/defines_enums.h	/^	STATE_SQUOTE,$/;"	e	enum:e_state
STRUCTS_H	includes/structs.h	/^# define STRUCTS_H$/;"	d
SUCESS	includes/defines_enums.h	/^# define	SUCESS	/;"	d
TOKENIZER_H	includes/tokenizer.h	/^# define TOKENIZER_H$/;"	d
TOKEN_OBJS	Makefile	/^TOKEN_OBJS = $(TOKEN_SRCS:.c=.o)$/;"	m
TOKEN_SRCS	Makefile	/^TOKEN_SRCS = $(addprefix .\/srcs\/token_srcs\/, tokenizer.c lexer.c token_buf_build.c  lexer_token_init.c lexer_decide_w_type.c lexer_word_converter.c lexer_replacer.c get_replaced_len.c cpy_replaced.c replacer_tool.c)$/;"	m
TOOLS_OBJS	Makefile	/^TOOLS_OBJS = $(TOOLS_SRCS:.c=.o)$/;"	m
TOOLS_SRCS	Makefile	/^TOOLS_SRCS = $(addprefix .\/srcs\/tools\/, error_handler.c tmp_print.c)$/;"	m
T_SIZE	libft/libft.h	/^#  define T_SIZE$/;"	d
UNSET	includes/defines_enums.h	/^# define	UNSET	/;"	d
W_APPENDING_TO	includes/defines_enums.h	/^	W_APPENDING_TO = 8,$/;"	e	enum:e_word_type
W_ARG	includes/defines_enums.h	/^	W_ARG = 2,$/;"	e	enum:e_word_type
W_BUILTIN	includes/defines_enums.h	/^	W_BUILTIN = 1,$/;"	e	enum:e_word_type
W_COMMAND	includes/defines_enums.h	/^	W_COMMAND = 0,$/;"	e	enum:e_word_type
W_DELIMETER	includes/defines_enums.h	/^	W_DELIMETER = 11$/;"	e	enum:e_word_type
W_FILE	includes/defines_enums.h	/^	W_FILE = 5,$/;"	e	enum:e_word_type
W_HERE_DOC	includes/defines_enums.h	/^	W_HERE_DOC = 7,$/;"	e	enum:e_word_type
W_OPTION	includes/defines_enums.h	/^	W_OPTION = 4,$/;"	e	enum:e_word_type
W_PIPE	includes/defines_enums.h	/^	W_PIPE = 6,$/;"	e	enum:e_word_type
W_REDIRECTION_INPUT	includes/defines_enums.h	/^	W_REDIRECTION_INPUT = 9,$/;"	e	enum:e_word_type
W_REDIRECTION_OUTPUT	includes/defines_enums.h	/^	W_REDIRECTION_OUTPUT = 10,$/;"	e	enum:e_word_type
W_SPACE	includes/defines_enums.h	/^	W_SPACE = 3,$/;"	e	enum:e_word_type
_ft_recur_nbr	libft/ft_putnbr_unsigned.c	/^static void	_ft_recur_nbr(long long n, int fd, int *rtn)$/;"	f	file:
add_env_arr	srcs/builtin_srcs/set_envkey.c	/^char	**add_env_arr(t_data *data, char **args)$/;"	f
append_lst	includes/structs.h	/^	t_dlst			*append_lst;$/;"	m	struct:s_cmd_cont
args	includes/structs.h	/^	char			**args;$/;"	m	struct:s_cmd_cont
back	libft/libft.h	/^	struct s_dlst	*back;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
back	libft/libft.h	/^	struct s_envlst	*back;$/;"	m	struct:s_envlst	typeref:struct:s_envlst::s_envlst
buf_len	includes/structs.h	/^	int					buf_len;$/;"	m	struct:s_lexer_token
buffer	includes/structs.h	/^	char				*buffer;$/;"	m	struct:s_lexer_token
builtin	srcs/execute_srcs/execute.c	/^int		builtin(char *cmd)$/;"	f
c	includes/structs.h	/^	char				c;$/;"	m	struct:s_token
cal_size	libft/ft_split_charset.c	/^int	cal_size(char *str, char *charset)$/;"	f
case_dquote	srcs/token_srcs/token_buf_build.c	/^void	case_dquote(t_token *tok_buf, char c, int *state)$/;"	f
case_squote	srcs/token_srcs/token_buf_build.c	/^void	case_squote(t_token *tok_buf, char c, int *state)$/;"	f
change_env	srcs/builtin_srcs/ft_cd.c	/^void	change_env(t_data *data, char *pwd, char *oldpwd)$/;"	f
change_type_arg	srcs/builtin_srcs/set_token.c	/^void	change_type_arg(t_dlst *lst)$/;"	f
check_append	srcs/parsing_srcs_m/make_append_lst.c	/^int	check_append(t_dlst *tok_lst)$/;"	f
check_builtin	srcs/parsing_srcs_m/get_cmdtype.c	/^static int	check_builtin(char *str)$/;"	f	file:
check_builtin	srcs/token_srcs/lexer_decide_w_type.c	/^int	check_builtin(char *str)$/;"	f
check_charset	libft/ft_split_charset.c	/^int	check_charset(char c, char *charset)$/;"	f
check_env	srcs/token_srcs/cpy_replaced.c	/^void	check_env(char **rtn, char **str, t_envlst *envlst)$/;"	f
check_heredoc	srcs/parsing_srcs_m/make_heredoc_lst.c	/^int	check_heredoc(t_dlst *tok_lst)$/;"	f
check_redirection_input	srcs/parsing_srcs_m/make_input_lst.c	/^int	check_redirection_input(t_dlst *tok_lst)$/;"	f
check_redirection_output	srcs/parsing_srcs_m/make_output_lst.c	/^int	check_redirection_output(t_dlst *tok_lst)$/;"	f
check_spec_token	srcs/token_srcs/lexer_decide_w_type.c	/^int	check_spec_token(char *str)$/;"	f
cmd	includes/structs.h	/^	char			*cmd;$/;"	m	struct:s_cmd_cont
cmd_lst	includes/structs.h	/^	t_dlst		*cmd_lst;$/;"	m	struct:s_data
cmdtype	includes/structs.h	/^	enum e_cmdtype	cmdtype;$/;"	m	struct:s_cmd_cont	typeref:enum:s_cmd_cont::e_cmdtype
command	includes/structs.h	/^	char		*command;$/;"	m	struct:s_data
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_dlst
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_tree
convert_arg	srcs/builtin_srcs/set_token.c	/^void	convert_arg(t_dlst *cur)$/;"	f
convert_file	srcs/builtin_srcs/set_token.c	/^void	convert_file(t_dlst *cur)$/;"	f
convert_file_delimeter	srcs/token_srcs/lexer_word_converter.c	/^void	convert_file_delimeter(t_dlst *lst)$/;"	f
convert_to_arg	srcs/token_srcs/lexer_word_converter.c	/^void	convert_to_arg(t_dlst *lst)$/;"	f
cpy_env	srcs/token_srcs/cpy_replaced.c	/^void	cpy_env(char **rtn, char *value)$/;"	f
cpy_exitstatus	srcs/token_srcs/cpy_replaced.c	/^void	cpy_exitstatus(char **rtn, char **str, t_data *data)$/;"	f
cpy_replaced	srcs/token_srcs/cpy_replaced.c	/^void	cpy_replaced(char *rtn, char *str, t_data *data, int len)$/;"	f
delimeter	includes/structs.h	/^	char	*delimeter;$/;"	m	struct:s_heredoc_cont
display_bash	srcs/builtin_srcs/display.c	/^void	display_bash(t_data *data, int ac, char **av)$/;"	f
display_bash	srcs/main_srcs/display.c	/^void	display_bash(t_data *data)$/;"	f
do_change	srcs/token_srcs/lexer_word_converter.c	/^void	do_change(int i, t_dlst	**cur)$/;"	f
do_change_file_deli	srcs/token_srcs/lexer_word_converter.c	/^void	do_change_file_deli(t_dlst *lst)$/;"	f
dollar_question_len	srcs/token_srcs/get_replaced_len.c	/^int	dollar_question_len(char *str, t_data *data)$/;"	f
e_char_type	includes/defines_enums.h	/^enum	e_char_type$/;"	g
e_cmdtype	includes/structs.h	/^enum e_cmdtype$/;"	g
e_state	includes/defines_enums.h	/^enum	e_state$/;"	g
e_word_type	includes/defines_enums.h	/^enum	e_word_type$/;"	g
env	includes/structs.h	/^	char		**env;$/;"	m	struct:s_data
env_len	srcs/token_srcs/get_replaced_len.c	/^int	env_len(char *str, t_data *data)$/;"	f
env_line	libft/libft.h	/^	void			*env_line;$/;"	m	struct:s_envlst
env_lst	includes/structs.h	/^	t_envlst	*env_lst;$/;"	m	struct:s_data
env_size	includes/structs.h	/^	size_t		env_size;$/;"	m	struct:s_data
exec	srcs/execute_srcs/exec.c	/^void	exec(t_data *data)$/;"	f
execute	srcs/execute_srcs/execute.c	/^void	execute(t_data *data)$/;"	f
execute_builtin	srcs/execute_srcs/execute.c	/^void	execute_builtin(t_data *data, char *cmd, char **args)$/;"	f
exit_status	includes/structs.h	/^	int			exit_status;$/;"	m	struct:s_data
fd	includes/structs.h	/^	int		fd;$/;"	m	struct:s_io_cont
filepath	includes/structs.h	/^	char	*filepath;$/;"	m	struct:s_io_cont
fill_buf	srcs/token_srcs/token_buf_build.c	/^void	fill_buf(t_token *tok_buf, char c, int *state)$/;"	f
find_env	srcs/token_srcs/get_replaced_len.c	/^int	find_env(char *str, t_envlst *env_lst)$/;"	f
free_env_lst	srcs/builtin_srcs/ft_unset.c	/^void	free_env_lst(t_data *data, char **args)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_btree_get_left	libft/ft_btree_get_left.c	/^t_tree	*ft_btree_get_left(t_tree *node)$/;"	f
ft_btree_get_right	libft/ft_btree_get_right.c	/^t_tree	*ft_btree_get_right(t_tree *node)$/;"	f
ft_btree_inordertrav	libft/ft_btree_inordertrav.c	/^void	ft_btree_inordertrav(t_tree *node, void (action)(void *))$/;"	f
ft_btree_make_left	libft/ft_btree_make_left.c	/^void	ft_btree_make_left(t_tree *main, t_tree *sub, void (del)(void *))$/;"	f
ft_btree_make_right	libft/ft_btree_make_right.c	/^void	ft_btree_make_right(t_tree *main, t_tree *sub, void (del)(void *))$/;"	f
ft_btree_new	libft/ft_btree_new.c	/^t_tree	*ft_btree_new(void	*content)$/;"	f
ft_btree_postordertrav	libft/ft_btree_postordertrav.c	/^void	ft_btree_postordertrav(t_tree *node, void (action)(void *))$/;"	f
ft_btree_preordertrav	libft/ft_btree_preordertrav.c	/^void	ft_btree_preordertrav(t_tree *node, void (action)(void *))$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, t_size n)$/;"	f
ft_caldigit	libft/ft_itoa.c	/^static int	ft_caldigit(long n)$/;"	f	file:
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(t_size count, t_size size)$/;"	f
ft_cat	libft/ft_strlcat.c	/^static void	ft_cat(char *dest, char *src, t_size s, t_size dsize)$/;"	f	file:
ft_cd	srcs/builtin_srcs/ft_cd.c	/^void	ft_cd(t_data *data, char *path)$/;"	f
ft_dlst_clear	libft/ft_dlst_clear.c	/^void	ft_dlst_clear(t_dlst **dlst, void (*del)(void *))$/;"	f
ft_dlst_delete	libft/ft_dlst_delete.c	/^void	ft_dlst_delete(t_dlst *cur, t_dlst **origin, void (*del)(void *))$/;"	f
ft_dlst_delone	libft/ft_dlst_delone.c	/^void	ft_dlst_delone(t_dlst *dlst, void (*del)(void *))$/;"	f
ft_dlst_last	libft/ft_dlst_last.c	/^t_dlst	*ft_dlst_last(t_dlst *dlst)$/;"	f
ft_dlst_new	libft/ft_dlst_new.c	/^t_dlst	*ft_dlst_new(void *c)$/;"	f
ft_dlst_popback	libft/ft_dlst_popback.c	/^t_dlst	*ft_dlst_popback(t_dlst **dlst)$/;"	f
ft_dlst_popfront	libft/ft_dlst_popfront.c	/^t_dlst	*ft_dlst_popfront(t_dlst **dlst)$/;"	f
ft_dlst_pushback	libft/ft_dlst_pushback.c	/^void	ft_dlst_pushback(t_dlst **dlst, t_dlst *new)$/;"	f
ft_dlst_pushfront	libft/ft_dlst_pushfront.c	/^void	ft_dlst_pushfront(t_dlst **dlst, t_dlst *new)$/;"	f
ft_dlst_size	libft/ft_dlst_size.c	/^int	ft_dlst_size(t_dlst *lst)$/;"	f
ft_echo	srcs/builtin_srcs/ft_echo.c	/^void	ft_echo(t_data *data, int flag, char *str)$/;"	f
ft_env	srcs/builtin_srcs/ft_env.c	/^void    ft_env(t_data   *data)$/;"	f
ft_envlst_last	libft/ft_builtin.c	/^t_envlst	*ft_envlst_last(t_envlst *envlst)$/;"	f
ft_envlst_new	libft/ft_builtin.c	/^t_envlst	*ft_envlst_new(void *c)$/;"	f
ft_envlst_pushback	libft/ft_builtin.c	/^void	ft_envlst_pushback(t_envlst **envlst, t_envlst *new)$/;"	f
ft_exit	srcs/builtin_srcs/ft_exit.c	/^void	ft_exit(int ac, char *av[])$/;"	f
ft_export	srcs/builtin_srcs/ft_export.c	/^void	ft_export(t_data *data, char **args)$/;"	f
ft_freesplit	libft/ft_split.c	/^void	ft_freesplit(char ***s, int *p_index)$/;"	f
ft_get_left	libft/ft_strtrim.c	/^static t_size	ft_get_left(char *ds, char *set)$/;"	f	file:
ft_get_right	libft/ft_strtrim.c	/^static t_size	ft_get_right(char *ds, char *set)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void*))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void	*content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_make_wd	libft/ft_split.c	/^static char	*ft_make_wd(char *str, char c, int	*alloc_err)$/;"	f	file:
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, t_size n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, t_size n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, t_size n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, t_size len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, t_size len)$/;"	f
ft_print_conv	libft/ft_printf.c	/^static int	ft_print_conv(char	*fmt, va_list *ap)$/;"	f	file:
ft_print_pointer	libft/ft_print_pointer.c	/^int	ft_print_pointer(void *p)$/;"	f
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *fmt, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^int	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_hex	libft/ft_putnbr_hex.c	/^int	ft_putnbr_hex(int n, int big_small)$/;"	f
ft_putnbr_unsigned	libft/ft_putnbr_unsigned.c	/^int	ft_putnbr_unsigned(unsigned int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^int	ft_putstr_fd(char *s, int fd)$/;"	f
ft_pwd	srcs/builtin_srcs/ft_pwd.c	/^void	ft_pwd()$/;"	f
ft_recur_hex	libft/ft_putnbr_hex.c	/^static void	ft_recur_hex(unsigned long long ln, char *hex, int *rtn)$/;"	f	file:
ft_recur_nbr	libft/ft_putnbr_fd.c	/^static void	ft_recur_nbr(long long n, int fd, int *rtn)$/;"	f	file:
ft_recur_pointer	libft/ft_print_pointer.c	/^static void	ft_recur_pointer(unsigned long long p, int *rtn)$/;"	f	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_split_charset	libft/ft_split_charset.c	/^char	**ft_split_charset(char *str, char *charset)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(char *src)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^t_size	ft_strlcat(char *dest, char *src, t_size size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^t_size	ft_strlcpy(char *dest, char *src, t_size size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^t_size	ft_strlen(char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(char *s1, char *s2, t_size n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(char *src, int size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, t_size len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, t_size len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_unset	srcs/builtin_srcs/ft_unset.c	/^void	ft_unset(t_data *data, char **args)$/;"	f
ft_wd_cnt	libft/ft_split.c	/^static	int	ft_wd_cnt(char *str, char c)$/;"	f	file:
get_args_count	srcs/parsing_srcs_m/make_args.c	/^int	get_args_count(t_dlst *tok_lst)$/;"	f
get_cmdtype	srcs/parsing_srcs_m/get_cmdtype.c	/^enum e_cmdtype	get_cmdtype(char *cmd)$/;"	f
get_next_token	srcs/token_srcs/lexer_word_converter.c	/^int	get_next_token(t_dlst *lst)$/;"	f
get_process_num	srcs/execute_srcs/exec.c	/^int	get_process_num(t_dlst *cmd_lst)$/;"	f
get_replaced	srcs/token_srcs/lexer_replacer.c	/^char	*get_replaced(t_data *data, char *str)$/;"	f
get_replaced_len	srcs/token_srcs/get_replaced_len.c	/^int	get_replaced_len(char *str, t_data *data)$/;"	f
get_word_type	srcs/token_srcs/lexer_decide_w_type.c	/^int	get_word_type(char *str)$/;"	f
here_document	srcs/builtin_srcs/redirection.c	/^int	here_document()$/;"	f
heredoc_lst	includes/structs.h	/^	t_dlst			*heredoc_lst;$/;"	m	struct:s_cmd_cont
init_cmd_cont	srcs/parsing_srcs_m/parser_tools.c	/^t_cmd_cont	*init_cmd_cont(void)$/;"	f
initialize_data	srcs/builtin_srcs/initialize_data.c	/^void	initialize_data(t_data *data, char *line)$/;"	f
initialize_data	srcs/main_srcs/initialize_data.c	/^void	initialize_data(t_data *data, char *line)$/;"	f
initialize_main	srcs/builtin_srcs/initialize_main.c	/^void	initialize_main(t_data *data, char **envp)$/;"	f
initialize_main	srcs/main_srcs/initialize_main.c	/^void	initialize_main(t_data *data, char **envp)$/;"	f
input_lst	includes/structs.h	/^	t_dlst			*input_lst;$/;"	m	struct:s_cmd_cont
join_args	srcs/parsing_srcs_m/make_args.c	/^void	join_args(char **rtn, t_data *data)$/;"	f
join_args_next	srcs/parsing_srcs_m/make_args.c	/^void	join_args_next(t_dlst **tok_lst, t_dlst *next,$/;"	f
join_args_set	srcs/parsing_srcs_m/make_args.c	/^void	join_args_set(t_data *data, t_dlst **tok_lst,$/;"	f
key	libft/libft.h	/^	void			*key;$/;"	m	struct:s_envlst
last_null	srcs/builtin_srcs/ft_echo.c	/^char	*last_null(char *str)$/;"	f
left	libft/libft.h	/^	struct s_tree	*left;$/;"	m	struct:s_tree	typeref:struct:s_tree::s_tree
lexer	srcs/token_srcs/lexer.c	/^void	lexer(t_data *data)$/;"	f
lexer_add_nth	srcs/token_srcs/lexer.c	/^void	lexer_add_nth(t_data *data)$/;"	f
lexer_cpy_buf	srcs/token_srcs/lexer_token_init.c	/^void	lexer_cpy_buf(t_lexer_token *rtn, t_token *tok_buf)$/;"	f
lexer_decide_w_type	srcs/token_srcs/lexer_decide_w_type.c	/^void	lexer_decide_w_type(t_lexer_token	*l_tok)$/;"	f
lexer_get_buff_len	srcs/token_srcs/lexer_token_init.c	/^int	lexer_get_buff_len(t_token *tok_buf)$/;"	f
lexer_get_len_lg	srcs/token_srcs/lexer_token_init.c	/^int	lexer_get_len_lg(t_token *tok_buf, enum e_char_type compare)$/;"	f
lexer_get_len_quotes	srcs/token_srcs/lexer_token_init.c	/^int	lexer_get_len_quotes(t_token *tok_buf, enum e_char_type compare)$/;"	f
lexer_replacer	srcs/token_srcs/lexer_replacer.c	/^void	lexer_replacer(t_data *data)$/;"	f
lexer_space_token	srcs/token_srcs/lexer.c	/^t_lexer_token	*lexer_space_token(void)$/;"	f
lexer_tok_free	srcs/parsing_srcs_m/parser_tools.c	/^void	lexer_tok_free(void *cur)$/;"	f
lexer_token_init	srcs/token_srcs/lexer_token_init.c	/^t_lexer_token	*lexer_token_init(t_token *tok_buf)$/;"	f
lexer_token_lst	includes/structs.h	/^	t_dlst		*lexer_token_lst;$/;"	m	struct:s_data
lexer_token_lst_init	srcs/token_srcs/lexer.c	/^void	lexer_token_lst_init(t_data *data)$/;"	f
lexer_token_printer	srcs/token_srcs/lexer.c	/^void	lexer_token_printer(t_data *data)$/;"	f
lexer_w_converter	srcs/token_srcs/lexer_word_converter.c	/^void	lexer_w_converter(t_data *data)$/;"	f
main	srcs/builtin_srcs/main.c	/^int main(int ac, char **av, char **envp)$/;"	f
main	srcs/builtin_srcs/redirection.c	/^int main(int ac, char **av, char **envp)$/;"	f
main	srcs/main_srcs/main.c	/^int main(int ac, char **av, char **envp)$/;"	f
make_append_cont	srcs/parsing_srcs_m/make_append_lst.c	/^t_io_cont	*make_append_cont(t_data *data, t_dlst *tok_lst)$/;"	f
make_append_lst	srcs/parsing_srcs_m/make_append_lst.c	/^t_dlst	*make_append_lst(t_data *data)$/;"	f
make_args	srcs/parsing_srcs_m/make_args.c	/^char	**make_args(t_data *data)$/;"	f
make_cmd	srcs/parsing_srcs_m/make_cmd.c	/^char	*make_cmd(t_data *data)$/;"	f
make_heredoc_cont	srcs/parsing_srcs_m/make_heredoc_lst.c	/^t_heredoc_cont	*make_heredoc_cont(t_data *data, t_dlst *tok_lst)$/;"	f
make_heredoc_lst	srcs/parsing_srcs_m/make_heredoc_lst.c	/^t_dlst	*make_heredoc_lst(t_data *data)$/;"	f
make_input_cont	srcs/parsing_srcs_m/make_input_lst.c	/^t_io_cont	*make_input_cont(t_data *data, t_dlst *tok_lst)$/;"	f
make_input_lst	srcs/parsing_srcs_m/make_input_lst.c	/^t_dlst	*make_input_lst(t_data *data)$/;"	f
make_key	srcs/builtin_srcs/set_envkey.c	/^char	*make_key(char *envstr)$/;"	f
make_key	srcs/main_srcs/set_envkey.c	/^char	*make_key(char *envstr)$/;"	f
make_output_cont	srcs/parsing_srcs_m/make_output_lst.c	/^t_io_cont	*make_output_cont(t_data *data, t_dlst *tok_lst)$/;"	f
make_output_lst	srcs/parsing_srcs_m/make_output_lst.c	/^t_dlst	*make_output_lst(t_data *data)$/;"	f
make_possible_cp	srcs/token_srcs/replacer_tool.c	/^char	*make_possible_cp(char *str)$/;"	f
make_str	libft/ft_split_charset.c	/^char	*make_str(char *str, int s, char *charset, int *alloc_error)$/;"	f
make_token	srcs/builtin_srcs/set_token.c	/^t_token	*make_token(char *str)$/;"	f
make_token_lst	srcs/builtin_srcs/set_token.c	/^t_dlst	*make_token_lst(char *line)$/;"	f
next	libft/libft.h	/^	struct s_dlst	*next;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
next	libft/libft.h	/^	struct s_envlst	*next;$/;"	m	struct:s_envlst	typeref:struct:s_envlst::s_envlst
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
nth	includes/structs.h	/^	int					nth;$/;"	m	struct:s_lexer_token
output_lst	includes/structs.h	/^	t_dlst			*output_lst;$/;"	m	struct:s_cmd_cont
parser	srcs/parsing_srcs_m/parser.c	/^void	parser(t_data *data)$/;"	f
pipe_cmd	srcs/parsing_srcs_m/pipe_cmd.c	/^void	pipe_cmd(t_data *data)$/;"	f
print_appendlst	srcs/execute_srcs/print_cmddata.c	/^void	print_appendlst(t_dlst *cmdlst)$/;"	f
print_args	srcs/execute_srcs/print_cmddata.c	/^void	print_args(t_dlst *cmdlst)$/;"	f
print_cmddata	srcs/execute_srcs/print_cmddata.c	/^void	print_cmddata(t_data *data)$/;"	f
print_error	srcs/tools/error_handler.c	/^void	print_error(int errnum)$/;"	f
print_heredoc_lst	srcs/parsing_srcs_m/parser_tools.c	/^void	print_heredoc_lst(t_dlst *lst)$/;"	f
print_heredoclst	srcs/execute_srcs/print_cmddata.c	/^void	print_heredoclst(t_dlst *cmdlst)$/;"	f
print_input_lst	srcs/parsing_srcs_m/parser_tools.c	/^void	print_input_lst(t_dlst *lst)$/;"	f
print_inputlst	srcs/execute_srcs/print_cmddata.c	/^void	print_inputlst(t_dlst *cmdlst)$/;"	f
print_outputlst	srcs/execute_srcs/print_cmddata.c	/^void	print_outputlst(t_dlst *cmdlst)$/;"	f
print_token_lst	srcs/tools/tmp_print.c	/^void	print_token_lst(t_data *data)$/;"	f
print_toks	srcs/tools/tmp_print.c	/^void	print_toks(t_token *tok_buf)$/;"	f
remove_env_arr	srcs/builtin_srcs/ft_unset.c	/^char	**remove_env_arr(t_data *data, char **args)$/;"	f
replacer	srcs/token_srcs/lexer_replacer.c	/^void	replacer(t_data *data, t_dlst *tok_lst)$/;"	f
right	libft/libft.h	/^	struct s_tree	*right;$/;"	m	struct:s_tree	typeref:struct:s_tree::s_tree
s_cmd_cont	includes/structs.h	/^typedef struct	s_cmd_cont$/;"	s
s_data	includes/structs.h	/^typedef	struct s_data$/;"	s
s_dlst	libft/libft.h	/^typedef struct s_dlst$/;"	s
s_envlst	libft/libft.h	/^typedef struct s_envlst$/;"	s
s_heredoc_cont	includes/structs.h	/^typedef struct	s_heredoc_cont$/;"	s
s_io_cont	includes/structs.h	/^typedef struct	s_io_cont$/;"	s
s_lexer_token	includes/structs.h	/^typedef	struct s_lexer_token$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_token	includes/structs.h	/^typedef	struct s_token$/;"	s
s_tree	libft/libft.h	/^typedef struct s_tree$/;"	s
set_env_arr	srcs/builtin_srcs/set_envkey.c	/^void	set_env_arr(t_data *data, char **envp)$/;"	f
set_env_arr	srcs/main_srcs/set_envkey.c	/^void	set_env_arr(t_data *data, char **envp)$/;"	f
set_env_list	srcs/main_srcs/set_envkey.c	/^void	set_env_list(t_data *data, char **envp)$/;"	f
set_env_lst	srcs/builtin_srcs/set_envkey.c	/^void	set_env_lst(t_data *data, char **envp)$/;"	f
set_handler	srcs/builtin_srcs/sig_handler.c	/^void	set_handler(void)$/;"	f
set_handler	srcs/main_srcs/sig_handler.c	/^void	set_handler(void)$/;"	f
set_token	srcs/builtin_srcs/set_token.c	/^void	set_token(t_data *data, char *line)$/;"	f
sigint_handler	srcs/builtin_srcs/sig_handler.c	/^void	sigint_handler(int sig)$/;"	f
sigint_handler	srcs/main_srcs/sig_handler.c	/^void	sigint_handler(int sig)$/;"	f
sigquit_handler	srcs/builtin_srcs/sig_handler.c	/^void	sigquit_handler(int sig)$/;"	f
sigquit_handler	srcs/main_srcs/sig_handler.c	/^void	sigquit_handler(int sig)$/;"	f
simple_cmd	srcs/parsing_srcs_m/simple_cmd.c	/^void	simple_cmd(t_data *data)$/;"	f
size_envp	srcs/builtin_srcs/set_envkey.c	/^int	size_envp(char **envp)$/;"	f
size_envp	srcs/main_srcs/set_envkey.c	/^int	size_envp(char **envp)$/;"	f
stick_quotes	srcs/builtin_srcs/set_token.c	/^void	stick_quotes(t_dlst *cur)$/;"	f
str_size	libft/ft_split_charset.c	/^int	str_size(char *str, char *charset)$/;"	f
t_cmd_cont	includes/structs.h	/^}	t_cmd_cont;$/;"	t	typeref:struct:s_cmd_cont
t_data	includes/structs.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_dlst	libft/libft.h	/^}	t_dlst;$/;"	t	typeref:struct:s_dlst
t_envlst	libft/libft.h	/^}	t_envlst;$/;"	t	typeref:struct:s_envlst
t_heredoc_cont	includes/structs.h	/^}	t_heredoc_cont;$/;"	t	typeref:struct:s_heredoc_cont
t_io_cont	includes/structs.h	/^}	t_io_cont;$/;"	t	typeref:struct:s_io_cont
t_lexer_token	includes/structs.h	/^}	t_lexer_token;$/;"	t	typeref:struct:s_lexer_token
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_size	libft/libft.h	/^typedef unsigned long	t_size;$/;"	t
t_token	includes/structs.h	/^}	t_token;$/;"	t	typeref:struct:s_token
t_tree	libft/libft.h	/^}	t_tree;$/;"	t	typeref:struct:s_tree
there_is_pipe	srcs/parsing_srcs_m/parser.c	/^int		there_is_pipe(t_dlst *lst)$/;"	f
tok_buf	includes/structs.h	/^	t_token		*tok_buf;$/;"	m	struct:s_data
token_buf_build	srcs/token_srcs/token_buf_build.c	/^int	token_buf_build(t_data *data)$/;"	f
token_init	srcs/token_srcs/tokenizer.c	/^void	token_init(t_data *data)$/;"	f
tokenizer	srcs/token_srcs/tokenizer.c	/^int	tokenizer(t_data *data)$/;"	f
type	includes/structs.h	/^	enum e_char_type	type;$/;"	m	struct:s_token	typeref:enum:s_token::e_char_type
value	libft/libft.h	/^	void			*value;$/;"	m	struct:s_envlst
w_type	includes/structs.h	/^	enum e_word_type	w_type;$/;"	m	struct:s_lexer_token	typeref:enum:s_lexer_token::e_word_type
