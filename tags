!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUILTIN_OBJS	Makefile	/^BUILTIN_OBJS = $(BUILTIN_SRCS:.c=.o)$/;"	m
BUILTIN_SRCS	Makefile	/^BUILTIN_SRCS = $(addprefix .\/srcs\/builtin_srcs\/, )$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	Makefile	/^\\CFLAGS = -fsanitize=address -g3$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -c$/;"	m
ERROR_HANDLER	includes/error_handler.h	/^# define ERROR_HANDLER$/;"	d
FT	Makefile	/^FT = libft.a$/;"	m
FTDIR	Makefile	/^FTDIR = .\/libft\/$/;"	m
FTINC	Makefile	/^FTINC = .\/libft\/$/;"	m
GCC	Makefile	/^GCC = gcc$/;"	m
INC	Makefile	/^INC = .\/includes$/;"	m
LIBFT_H	libft/libft.h	/^# define  LIBFT_H$/;"	d
MAIN_H	includes/main.h	/^# define MAIN_H$/;"	d
MAIN_OBJS	Makefile	/^MAIN_OBJS = $(MAIN_SRCS:.c=.o)$/;"	m
MAIN_SRCS	Makefile	/^MAIN_SRCS = $(addprefix .\/srcs\/main_srcs\/, main.c sig_handler.c display.c set_envkey.c initialize_main.c)$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	srcs/builtin_srcs/Makefile	/^NAME = echo$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	srcs/builtin_srcs/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJ_FILES	Makefile	/^OBJ_FILES = $(MAIN_OBJS) $(BUILTIN_OBJS) $(TOOLS_OBJS)$/;"	m
OBJ_FILES	libft/Makefile	/^OBJ_FILES = $(OBJS)$/;"	m
RDFLAGS	Makefile	/^RDFLAGS = -I${RDINC} -L${RDLIB} -lreadline #readline compile flags$/;"	m
RDINC	Makefile	/^RDINC = ${HOME}\/.brew\/opt\/readline\/include #readline include path$/;"	m
RDLIB	Makefile	/^RDLIB = ${HOME}\/.brew\/opt\/readline\/lib #readline lib path$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_isdigit.c ft_isalpha.c ft_isalnum.c ft_isascii.c ft_strlen.c \\$/;"	m
SRCS	srcs/builtin_srcs/Makefile	/^SRCS = ft_echo.c$/;"	m
TOOLS_OBJS	Makefile	/^TOOLS_OBJS = $(TOOLS_SRCS:.c=.o)$/;"	m
TOOLS_SRCS	Makefile	/^TOOLS_SRCS = $(addprefix .\/srcs\/tools\/, error_handler.c)$/;"	m
T_SIZE	libft/libft.h	/^#  define T_SIZE$/;"	d
_ft_recur_nbr	libft/ft_putnbr_unsigned.c	/^static void	_ft_recur_nbr(long long n, int fd, int *rtn)$/;"	f	file:
back	libft/libft.h	/^	struct s_dlst	*back;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
cal_size	libft/ft_split_charset.c	/^int	cal_size(char *str, char *charset)$/;"	f
check_charset	libft/ft_split_charset.c	/^int	check_charset(char c, char *charset)$/;"	f
check_option	srcs/builtin_srcs/ft_echo.c	/^void	check_option(char *av[], int *flag, int *i)$/;"	f
command	includes/main.h	/^	char		*command;$/;"	m	struct:s_data
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_dlst
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
display_bash	srcs/main_srcs/display.c	/^void	display_bash(t_data *data)$/;"	f
env	srcs/builtin_srcs/ft_env.c	/^void	env()$/;"	f
env_key	includes/main.h	/^	t_dlst		*env_key;$/;"	m	struct:s_data
exist	srcs/builtin_srcs/ft_env.c	/^	int				exist;$/;"	m	struct:s_env	file:
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, t_size n)$/;"	f
ft_caldigit	libft/ft_itoa.c	/^static int	ft_caldigit(long n)$/;"	f	file:
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(t_size count, t_size size)$/;"	f
ft_cat	libft/ft_strlcat.c	/^static void	ft_cat(char *dest, char *src, t_size s, t_size dsize)$/;"	f	file:
ft_cd	srcs/builtin_srcs/ft_cd.c	/^void	ft_cd(int ac, char *av[])$/;"	f
ft_dlst_clear	libft/ft_dlst_clear.c	/^void	ft_dlst_clear(t_dlst **dlst, void (*del)(void *))$/;"	f
ft_dlst_delone	libft/ft_dlst_delone.c	/^void	ft_dlst_delone(t_dlst *dlst, void (*del)(void *))$/;"	f
ft_dlst_last	libft/ft_dlst_last.c	/^t_dlst	*ft_dlst_last(t_dlst *dlst)$/;"	f
ft_dlst_new	libft/ft_dlst_new.c	/^t_dlst	*ft_dlst_new(void *c)$/;"	f
ft_dlst_popback	libft/ft_dlst_popback.c	/^t_dlst	*ft_dlst_popback(t_dlst **dlst)$/;"	f
ft_dlst_popfront	libft/ft_dlst_popfront.c	/^t_dlst	*ft_dlst_popfront(t_dlst **dlst)$/;"	f
ft_dlst_pushback	libft/ft_dlst_pushback.c	/^void	ft_dlst_pushback(t_dlst **dlst, t_dlst *new)$/;"	f
ft_dlst_pushfront	libft/ft_dlst_pushfront.c	/^void	ft_dlst_pushfront(t_dlst **dlst, t_dlst *new)$/;"	f
ft_dlst_size	libft/ft_dlst_size.c	/^int	ft_dlst_size(t_dlst *lst)$/;"	f
ft_echo	srcs/builtin_srcs/ft_echo.c	/^void	ft_echo(int ac, char *av[], int flag)$/;"	f
ft_exit	srcs/builtin_srcs/ft_exit.c	/^void	ft_exit(int ac, char *av[])$/;"	f
ft_freesplit	libft/ft_split.c	/^void	ft_freesplit(char ***s, int *p_index)$/;"	f
ft_get_left	libft/ft_strtrim.c	/^static t_size	ft_get_left(char *ds, char *set)$/;"	f	file:
ft_get_right	libft/ft_strtrim.c	/^static t_size	ft_get_right(char *ds, char *set)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void*))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void	*content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_make_wd	libft/ft_split.c	/^static char	*ft_make_wd(char *str, char c, int	*alloc_err)$/;"	f	file:
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, t_size n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, t_size n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, t_size n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, t_size len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, t_size len)$/;"	f
ft_print_conv	libft/ft_printf.c	/^static int	ft_print_conv(char	*fmt, va_list *ap)$/;"	f	file:
ft_print_pointer	libft/ft_print_pointer.c	/^int	ft_print_pointer(void *p)$/;"	f
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *fmt, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^int	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_hex	libft/ft_putnbr_hex.c	/^int	ft_putnbr_hex(int n, int big_small)$/;"	f
ft_putnbr_unsigned	libft/ft_putnbr_unsigned.c	/^int	ft_putnbr_unsigned(unsigned int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^int	ft_putstr_fd(char *s, int fd)$/;"	f
ft_recur_hex	libft/ft_putnbr_hex.c	/^static void	ft_recur_hex(unsigned long long ln, char *hex, int *rtn)$/;"	f	file:
ft_recur_nbr	libft/ft_putnbr_fd.c	/^static void	ft_recur_nbr(long long n, int fd, int *rtn)$/;"	f	file:
ft_recur_pointer	libft/ft_print_pointer.c	/^static void	ft_recur_pointer(unsigned long long p, int *rtn)$/;"	f	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_split_charset	libft/ft_split_charset.c	/^char	**ft_split_charset(char *str, char *charset)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(char *src)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^t_size	ft_strlcat(char *dest, char *src, t_size size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^t_size	ft_strlcpy(char *dest, char *src, t_size size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^t_size	ft_strlen(char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(char *s1, char *s2, t_size n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(char *src, int size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, t_size len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, t_size len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_wd_cnt	libft/ft_split.c	/^static	int	ft_wd_cnt(char *str, char c)$/;"	f	file:
initialize_main	srcs/main_srcs/initialize_main.c	/^void	initialize_main(t_data *data, char **envp)$/;"	f
key	srcs/builtin_srcs/ft_env.c	/^	char			*key;$/;"	m	struct:s_env	file:
lst	includes/main.h	/^	t_dlst		*lst;$/;"	m	struct:s_data
main	srcs/builtin_srcs/ft_echo.c	/^int main(int ac, char *av[])$/;"	f
main	srcs/builtin_srcs/ft_exit.c	/^int	main(int ac, char *av[])$/;"	f
main	srcs/main_srcs/main.c	/^int main(int ac, char **av, char **envp)$/;"	f
make_key	srcs/main_srcs/set_envkey.c	/^char	*make_key(char *envstr)$/;"	f
make_str	libft/ft_split_charset.c	/^char	*make_str(char *str, int s, char *charset, int *alloc_error)$/;"	f
next	libft/libft.h	/^	struct s_dlst	*next;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	srcs/builtin_srcs/ft_env.c	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env	file:
print_error	srcs/tools/error_handler.c	/^void	print_error(int errnum)$/;"	f
s_data	includes/main.h	/^typedef	struct s_data$/;"	s
s_dlst	libft/libft.h	/^typedef struct s_dlst$/;"	s
s_env	srcs/builtin_srcs/ft_env.c	/^typedef struct	s_env$/;"	s	file:
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
set_data	srcs/main_srcs/display.c	/^void	set_data(t_data *data, char *line)$/;"	f
set_env_key	srcs/main_srcs/set_envkey.c	/^void	set_env_key(t_data *data, char **envp)$/;"	f
set_handler	srcs/main_srcs/sig_handler.c	/^void	set_handler(void)$/;"	f
sigint_handler	srcs/main_srcs/sig_handler.c	/^void	sigint_handler(int sig)$/;"	f
sigquit_handler	srcs/main_srcs/sig_handler.c	/^void	sigquit_handler(int sig)$/;"	f
str_size	libft/ft_split_charset.c	/^int	str_size(char *str, char *charset)$/;"	f
t_data	includes/main.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_dlst	libft/libft.h	/^}	t_dlst;$/;"	t	typeref:struct:s_dlst
t_env	srcs/builtin_srcs/ft_env.c	/^}	t_env;$/;"	t	typeref:struct:s_env	file:
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_size	libft/libft.h	/^typedef unsigned long	t_size;$/;"	t
value	srcs/builtin_srcs/ft_env.c	/^	char			*value;$/;"	m	struct:s_env	file:
